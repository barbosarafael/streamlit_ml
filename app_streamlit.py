import streamlit as st
import pandas as pd
import numpy as np
from PIL import Image

st.set_page_config(
        page_title = "Hello world",
        page_icon = "chart_with_upwards_trend",
        layout="wide"
    )


# Sidebar


page = st.sidebar.selectbox("Escolha uma p√°gina:", ['Considera√ß√µes iniciais', 'Big Numbers', 'Indicadores a n√≠vel Seller', \
    'Indicadores a n√≠vel Customer', 'Indicadores a n√≠vel Order'])

st.sidebar.markdown('---')

st.sidebar.markdown('Criado com ‚ù§Ô∏è por Rafael Barbosa')

st.sidebar.markdown("""

Github: [barbosarafael](https://github.com/barbosarafael)

LinkedIn: [Rafael Barbosa](https://www.linkedin.com/in/rafael-barbosa0/)

""")



if page == 'Considera√ß√µes iniciais':

    st.markdown("## üìà Sobre os dados")

    st.markdown("""
    Os dados desse dashboard/relat√≥rio √© relacionado √† e-commerce disponibilizados pela [Olist Store](https://olist.com/pt-br/)\
    e cont√©m informa√ß√µe de 100k transa√ß√µes de 2016 a 2018, de diversos marketplaces no Brasil.
    

    Nos dados temos informa√ß√µes dos pedidos, sejam eles status, pre√ßo do pedido, tipo de pagamento e etc. Os dados \
    s√£o anonimizados, ent√£o vossas pessoas nunca conseguir√£o saber qual transa√ß√£o est√° relacionada ao verdadeiro comprador, por exemplo.\


    Algumas considera√ß√µes:

    - Assim que o cliente recebe o produto, ele recebe uma pesquisa de satisfa√ß√£o
    - Um pedido pode ter v√°rios itens
    - Cada item pode ser faturado por atendido por um seller diferente
    - Todos os sellers s√£o identificados como casas do Game of Thrones


    Segundo os autores do dataset temos v√°rias op√ß√µes tratar nos dados: 

    - NLP
    - Clusteriza√ß√£o
    - Previs√£o de vendas
    - Desempenho na entrega
    - Qualidade produto 

    Se voc√™ quiser saber um pouco mais sobre a modelagem l√≥gica das tabelas dispon√≠veis, clique no bot√£o abaixo

    """)


    modelagem_logica = st.button('Clique aqui para mostrar a modelagem l√≥gica das tabelas üëà')


    if modelagem_logica: 

        imagem_modelagem_logica = Image.open('images/logical_model.png')

        st.image(imagem_modelagem_logica, caption = 'Modelagem l√≥gica das tabelas')



elif page == "Big Numbers":

    st.header("Em constru√ß√£o")

elif page == "Indicadores a n√≠vel Seller":

    st.header("Em constru√ß√£o")

elif page == "Indicadores a n√≠vel Customer":

    st.header("Em constru√ß√£o")

elif page == "Indicadores a n√≠vel Order":

    st.header("Em constru√ß√£o")


# @st.cache
# def load_data_order():

#     data_order = pd.read_csv("raw_data/olist_orders_dataset.csv")

#     data_order_item = pd.read_csv("raw_data/olist_order_items_dataset.csv")

#     data = data_order.merge(data_order_item, on = 'order_id', how = 'left')

#     return data


# data1 = load_data_order()    

# st.dataframe(data1.head())



